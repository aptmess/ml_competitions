-- POSTGRES SQL --

-- 1. Код создания таблицы stores

CREATE TABLE public.stores
(
    store_id integer NOT NULL,
    store_name character(20),
    store_region character(20),
    PRIMARY KEY (store_id)
);

ALTER TABLE public.stores
    OWNER to postgres;

-- Сгенерируем сначала stores с помощью generate_series
INSERT INTO stores (store_id, store_name, store_region) 
SELECT  id, 
	'Магазин' || id / 10 || id % 10, 
	'Регион' || ((id - 1) / 3 + 1) / 10 || ((id - 1) / 3 + 1) % 10
FROM
generate_series(1, 15) 
AS 
id;

-- 2.Создание таблицы sales
CREATE TABLE public.sales
(
    check_num integer NOT NULL,
    sales_date date NOT NULL,
    store_id integer NOT NULL,
    good_name character(7) NOT NULL,
    s_count integer NOT NULL,
    s_sum integer NOT NULL,
    PRIMARY KEY (check_num, sales_date, store_id, good_name),
    CONSTRAINT "foreign key for stores.store_id" FOREIGN KEY (store_id)
        REFERENCES public.stores (store_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        NOT VALID
);

ALTER TABLE public.sales
    OWNER to postgres;

--Рекурсивно заполним таблицу sales  с помощью такого же приёма

INSERT INTO sales
SELECT id, 
('2020-08-0' || id)::date,
id , 'Товар' || generate_series(1, 20) / 10 || generate_series(1, 20) % 10 , 4, 500
FROM generate_series(1, 9) vals (id);

-- Код создания таблицы store_arcs

CREATE TABLE public.store_arcs
(
    store_id integer NOT NULL,
    employee_id integer,
    event_ts timestamp with time zone,
    event_type integer,
    CONSTRAINT "foreign key for stores.store_id table store_arcs" FOREIGN KEY (store_id)
        REFERENCES public.stores (store_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
        NOT VALID
);

ALTER TABLE public.store_arcs
    OWNER to postgres;

--- Заполним за два дня таблицу store_arcs вручную

INSERT INTO store_arcs
VALUES
(1, 1, '2020-08-01 10:00:00', 1),
(1, 1, '2020-08-01 14:10:00', -1),
(1, 1, '2020-08-01 15:05:00', 1),
(1, 1, '2020-08-01 19:57:00', -1),
(1, 2, '2020-08-01 09:45:00', 1),
(1, 2, '2020-08-01 13:50:00', -1),
(1, 2, '2020-08-01 14:40:00', 1),
(1, 2, '2020-08-01 20:30:00', -1),
(1, 3, '2020-08-01 09:05:00', 1),
(1, 3, '2020-08-01 19:20:00', -1),
(2, 4, '2020-08-01 09:30:00', 1),
(2, 4, '2020-08-01 13:58:00', -1),
(2, 4, '2020-08-01 15:30:00', 1),
(2, 4, '2020-08-01 20:43:00', -1),
(2, 5, '2020-08-01 10:30:00', 1),
(2, 5, '2020-08-01 20:54:00', -1),
(2, 6, '2020-08-01 09:25:00', 1),
(2, 6, '2020-08-01 13:30:00', -1),
(2, 6, '2020-08-01 15:19:00', 1),
(2, 6, '2020-08-01 19:49:00', -1),
(1, 1, '2020-08-02 09:51:00', 1),
(1, 1, '2020-08-02 13:41:00', -1),
(1, 1, '2020-08-02 14:43:00', 1),
(1, 1, '2020-08-02 18:51:00', -1),
(1, 2, '2020-08-02 09:35:00', 1),
(1, 2, '2020-08-02 13:55:00', -1),
(1, 2, '2020-08-02 14:47:00', 1),
(1, 2, '2020-08-02 20:07:00', -1),
(1, 3, '2020-08-02 09:21:00', 1),
(1, 3, '2020-08-02 20:50:00', -1),
(2, 4, '2020-08-02 10:30:00', 1),
(2, 4, '2020-08-02 14:33:00', -1),
(2, 4, '2020-08-02 15:57:00', 1),
(2, 4, '2020-08-02 19:37:00', -1),
(2, 5, '2020-08-02 10:15:00', 1),
(2, 5, '2020-08-02 18:43:00', -1),
(2, 6, '2020-08-02 09:38:00', 1),
(2, 6, '2020-08-02 13:39:00', -1),
(2, 6, '2020-08-02 15:49:00', 1),
(2, 6, '2020-08-02 20:57:00', -1)